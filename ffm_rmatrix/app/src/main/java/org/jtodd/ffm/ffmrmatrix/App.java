/*
 * This source file was generated by the Gradle 'init' task
 */
package org.jtodd.ffm.ffmrmatrix;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.jtodd.ffm.JGaussFactorization;
import org.jtodd.ffm.JRashunalMatrix;
import org.jtodd.ffm.RMatrixFFM;

public class App {
    public static void main(String[] args) {
        int [][][] data;
        int [][][] demoData = {
            { { 1    }, { 2 }, { 3, 2 }, },
            { { 4, 3 }, { 5 }, { 6    }, },
        };
        try {
            if (args.length > 0) {
                List<String> lines = Files.readAllLines(Paths.get(args[0]));
                ArrayList<int[][]> fileData = new ArrayList<int[][]>();
                for (int i = 0; i < lines.size(); ++i) {
                    String line = lines.get(i);
                    String[] elements = line.split("(?<!^)[ ]+");
                    int[][] lineData = new int[elements.length][];
                    for (int j = 0; j < lineData.length; ++j) {
                        String[] elementParts = elements[j].split("/");
                        int[] fractionParts;
                        if (elementParts.length == 1) {
                            fractionParts = new int[] { Integer.parseInt(elementParts[0].trim()) };
                        } else {
                            fractionParts = new int[] {
                                    Integer.parseInt(elementParts[0].trim()),
                                    Integer.parseInt(elementParts[1].trim()),
                            };
                        }
                        lineData[j] = fractionParts;
                    }
                    fileData.add(lineData);
                }
                data = new int[fileData.size()][][];
                for (int i = 0; i < data.length; ++i) {
                    data[i] = fileData.get(i);
                }
            } else {
                data = demoData;
            }
        } catch (Exception e) {
            e.printStackTrace();
            data = demoData;
        }

        JRashunalMatrix m = new JRashunalMatrix(data);
        System.out.println("Input matrix:");
        System.out.println(m);

        try {
            JGaussFactorization factorization = RMatrixFFM.factor(data);

            System.out.println();
            System.out.println("PInverse:");
            System.out.println(factorization.pInverse);

            System.out.println();
            System.out.println("Lower:");
            System.out.println(factorization.lower);

            System.out.println();
            System.out.println("Diagonal:");
            System.out.println(factorization.diagonal);

            System.out.println();
            System.out.println("Upper:");
            System.out.println(factorization.upper);
        } catch (Throwable t) {
            System.err.println(t);
        }
    }
}
