plugins {
    id 'cpp-library'
}

library {
    linkage.set([Linkage.SHARED])
    targetMachines = [
        machines.windows.x86_64,
        machines.macOS.x86_64,
        machines.linux.x86_64,
    ]
    baseName = "jnirmatrix"

    binaries.configureEach {
        def compileTask = compileTask.get()
        compileTask.dependsOn(project(":app").tasks.named("compileJava"))

        compileTask.source.from fileTree(dir: "src/main/c", include: "**/*c")

        def jvmHome = System.getenv("JAVA_HOME")
        compileTask.includes.from(file("$jvmHome/include"))
        compileTask.includes.from(project(":app").layout.buildDirectory.dir("generated/sources/headers/java/main"))

        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isWindows()) {
            compileTask.includes.from("$jvmHome/include/win32")
            compileTask.includes.from(file("C:/headers/rashunal/include"))
            compileTask.includes.from(file("C:/headers/rmatrix/include"))
            compileTask.compilerArgs.add("/TC")
        } else if (os.isLinux()) {
            compileTask.includes.from(file("$jvmHome/include/linux"))
            compileTask.compilerArgs.addAll(["-x", "c", "-fPIC", "-std=c11"])
        } else if (os.isMacOsX()) {
            compileTask.includes.from(file("$jvmHome/include/darwin"))
            compileTask.compilerArgs.addAll(["-x", "c", "-fPIC", "-std=c11"])
        } else if (os.isUnix()) {
            compileTask.includes.from(file("$jvmHome/include/freebsd"))
            compileTask.compilerArgs.addAll(["-x", "c", "-fPIC", "-std=c11"])
        } else {
            throw new GradleException("Unsupported OS for JNI build: $os")
        }

        def linkTask = linkTask.get()
        if (toolChain instanceof GccCompatibleToolChain) {
            linkTask.linkerArgs.addAll([
                "-L/usr/local/lib",
                "-lrashunal",
                "-lrmatrix",
                "-Wl,-rpath,/usr/local/lib"
            ])
        } else if (toolChain instanceof VisualCpp) {
            linkTask.linkerArgs.addAll([
                "C:/libs/rashunal.lib",
                "C:/libs/rmatrix.lib"
            ])
        }
    }
}

def osName = rootProject.ext.normalizedOsName().capitalize()
def buildType = (project.findProperty("nativeBuildType") ?: "debug").capitalize()
def targetTaskName = "link${buildType}${osName}"

tasks.named("assemble") {
    dependsOn tasks.named(targetTaskName)
}

